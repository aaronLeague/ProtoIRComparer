/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package protoircomparer02.resources;

import java.io.*;
import javax.swing.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import okhttp3.*;
import org.json.*;

/**
 *
 * @author Aaron B. League
 */
public class Upload extends javax.swing.JFrame {

    //instantiate/initialize class variables
    static File file;
    OkHttpClient client = new OkHttpClient.Builder()
            .connectTimeout(5, TimeUnit.MINUTES)
            .readTimeout(5, TimeUnit.MINUTES)
            .writeTimeout(5, TimeUnit.MINUTES)
            .build();

    private JSONObject fileData;
    private JSONObject Path;

    /**
     * Creates new form IRComparerGUI3
     */
    public Upload() {

        //only open the upload window if offline mode is disabled (see UserAuth)
        if (!UserAuth.isOffline.isSelected()) {
            initComponents();
            this.setLocationRelativeTo(null);
        } else {
            ProtoIRComparer02.filePreview.setText("YOU ARE WORKING OFFLINE AND "
                    + "DO NOT HAVE ACCESS TO THE OSF.");
            ProtoIRComparer02.filePreview.append("\n TO CONNECT TO OSF, GO TO "
                    + "\"File > Enter OSF User ID\".");
            dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooser = new javax.swing.JFileChooser();
        fileLab = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();
        nameLab = new javax.swing.JLabel();
        nameCom = new javax.swing.JComboBox<>();
        truncLab = new javax.swing.JLabel();
        truncCom = new javax.swing.JComboBox<>();
        nodeLab = new javax.swing.JLabel();
        nodeCom = new javax.swing.JComboBox<>();
        functLab = new javax.swing.JLabel();
        functCom = new javax.swing.JComboBox<>();
        linkerLab = new javax.swing.JLabel();
        linkerCom = new javax.swing.JComboBox<>();
        basisLab = new javax.swing.JLabel();
        basisCom = new javax.swing.JComboBox<>();
        isExp = new javax.swing.JCheckBox();
        ChooseFileBut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        uploadBut = new javax.swing.JButton();

        setTitle("UPLOAD");
        setResizable(false);

        fileLab.setText("CURRENT FILE:");

        fileName.setText("[NO FILE SELECTED]");

        nameLab.setText("Name");
        nameLab.setToolTipText("Search MOFs by name");

        nameCom.setEditable(true);
        nameCom.setModel(new DefaultComboBoxModel(UpdateDefs.na.toArray()));

        truncLab.setText("Truncation");
        truncLab.setToolTipText("Search by node truncation");

        truncCom.setEditable(true);
        truncCom.setModel(new DefaultComboBoxModel(UpdateDefs.tr.toArray()));

        nodeLab.setText("Node");
        nodeLab.setToolTipText("Search MOFs by node structure");

        nodeCom.setEditable(true);
        nodeCom.setModel(new DefaultComboBoxModel(UpdateDefs.no.toArray()));

        functLab.setText("Functional");
        functLab.setToolTipText("Search by functional used");

        functCom.setEditable(true);
        functCom.setModel(new DefaultComboBoxModel(UpdateDefs.fu.toArray()));

        linkerLab.setText("Linker");
        linkerLab.setToolTipText("Search MOFs by linker");

        linkerCom.setEditable(true);
        linkerCom.setModel(new DefaultComboBoxModel(UpdateDefs.li.toArray()));

        basisLab.setText("Basis set");
        basisLab.setToolTipText("Search by basis set");

        basisCom.setEditable(true);
        basisCom.setModel(new DefaultComboBoxModel(UpdateDefs.ba.toArray()));

        isExp.setText("This is an experimental spectrum");
        isExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isExpActionPerformed(evt);
            }
        });

        ChooseFileBut.setText("Browse Local Files");
        ChooseFileBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseFileButActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SELECT OR ADD DATA BELOW FOR THE FILE YOU WISH TO UPLOAD");

        uploadBut.setText("UPLOAD");
        uploadBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(isExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(uploadBut))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLab)
                            .addComponent(nodeLab)
                            .addComponent(linkerLab))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameCom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(linkerCom, 0, 200, Short.MAX_VALUE)
                            .addComponent(nodeCom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(functLab)
                            .addComponent(truncLab)
                            .addComponent(basisLab))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(truncCom, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(functCom, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(basisCom, javax.swing.GroupLayout.Alignment.TRAILING, 0, 200, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileLab)
                        .addGap(18, 18, 18)
                        .addComponent(fileName)))
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(ChooseFileBut))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ChooseFileBut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLab)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLab)
                    .addComponent(nameCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(truncCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(truncLab))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(functCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nodeLab)
                        .addComponent(nodeCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(functLab)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basisCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(linkerLab)
                        .addComponent(linkerCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(basisLab)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isExp)
                    .addComponent(uploadBut))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseFileButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseFileButActionPerformed

        //This method uses the file chooser to help users select a file
        int returnVal = FileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = FileChooser.getSelectedFile();
            fileName.setText(file.getName());
        } else {
            ProtoIRComparer02.filePreview.setText("File access cancelled by "
                    + "user.");
        }
    }//GEN-LAST:event_ChooseFileButActionPerformed

    private void uploadButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButActionPerformed
        // Upload the selected file to the OSF

        //Make sure there is a file selected.
        if (file == null) {

            ProtoIRComparer02.filePreview.setText("NO FILE IS SELECTED.");

            //Make sure all parameters have a value selected.
        } else if (nameCom.getSelectedItem().equals("[new name]")
                || nodeCom.getSelectedItem().equals("[new node]")
                || linkerCom.getSelectedItem().equals("[new linker]")
                || truncCom.getSelectedItem().equals("[new truncation]")
                || functCom.getSelectedItem().equals("[new functional]")
                || basisCom.getSelectedItem().equals("[new basis set]")) {

            ProtoIRComparer02.filePreview.setText("ONE OR MORE PARAMETERS HAS "
                    + "NO OPTION SELECTED.\n"
                    + "YOU MUST SELECT AN OPTION FOR EACH PARAMETER TO "
                    + "CONTINUE.\n"
                    + "IF A PARAMETER IS NOT APPLICABLE TO YOUR FILE, "
                    + "SELECT \"N/A\".");

            //Make sure the file doesn't already exist.
        } else if (UpdateDefs.titles.contains(file.getName())) {

            ProtoIRComparer02.filePreview.setText("A FILE WITH THE SAME NAME "
                    + "ALREADY EXISTS.\n"
                    + "PLEASE MAKE SURE YOUR FILE IS NOT A DUPLICATE.\n"
                    + "IF YOUR FILE IS NOT A DUPLICATE, PLEASE SELECT A NEW "
                    + "NAME.");

        } else {

            //create the request to upload the file
            MediaType mediaType = MediaType.parse("text/plain");
            RequestBody body = RequestBody.create(mediaType, file);
            Request request = new Request.Builder()
                    .url("https://files.osf.io/v1/resources/d8av6/providers/"
                            + "osfstorage/?name=" + file.getName())
                    .put(body)
                    .addHeader("content-type", "text/plain")
                    .addHeader("authorization", "Basic " + UserAuth.key)
                    .addHeader("cache-control", "no-cache")
                    .addHeader("postman-token",
                            "b7b5ba6b-860f-70e4-2129-1099b71233f8")
                    .build();

            String path = "";

            //try to upload the file
            try {
                Response response = client.newCall(request).execute();

                String responseData = response.body().string();
                fileData = new JSONObject(responseData);
                Path = fileData.getJSONObject("data").getJSONObject("attributes");
                path = Path.getString("path").substring(1);

            } catch (Exception ex) {
                Logger.getLogger(Upload.class.getName()).log(Level.SEVERE, null, ex);
                ProtoIRComparer02.filePreview.setText("ERROR UPLOADING FILE "
                        + file.getName());

                JOptionPane.showMessageDialog(null, ex.toString(), "Upload Error",
                        JOptionPane.ERROR_MESSAGE);
            }

            //create JSON object for file metadata
            JSONObject addTags = new JSONObject();
            JSONObject data = new JSONObject();
            JSONObject attributes = new JSONObject();
            JSONArray tags = new JSONArray();
            tags.put("na:" + nameCom.getSelectedItem().toString());
            tags.put("no:" + nodeCom.getSelectedItem().toString());
            tags.put("li:" + linkerCom.getSelectedItem().toString());
            tags.put("tr:" + truncCom.getSelectedItem().toString());
            tags.put("fu:" + functCom.getSelectedItem().toString());
            tags.put("ba:" + basisCom.getSelectedItem().toString());
            if (isExp.isSelected()) {
                tags.put("exp");
            }
            attributes.put("tags", tags);
            data.put("type", "files");
            data.put("id", path);
            data.put("attributes", attributes);
            addTags.put("data", data);
            String addtags = addTags.toString();

            //create request to add metadata to the file
            MediaType reMediaType = MediaType.parse("application/json");
            RequestBody reBody = RequestBody.create(reMediaType, addtags);
            Request reRequest = new Request.Builder()
                    .url("https://api.osf.io/v2/files/" + path + "/")
                    .patch(reBody)
                    .addHeader("authorization", "Basic " + UserAuth.key)
                    .addHeader("content-type", "application/json")
                    .addHeader("cache-control", "no-cache")
                    .addHeader("postman-token",
                            "c3fb2b18-3fae-4763-53cb-67e3d465b94c")
                    .build();

            //try to add metadata to the file
            try {
                Response response = client.newCall(reRequest).execute();

                fileName.setText("");

                ProtoIRComparer02.filePreview.setText("FILE " + file.getName()
                        + " UPLOADED SUCCESSFULLY AS FILE " + path);

            } catch (Exception ex) {
                Logger.getLogger(Upload.class.getName()).log(Level.SEVERE, null, ex);
                ProtoIRComparer02.filePreview.setText("ERROR UPLOADING METADATA "
                        + "FOR FILE " + file.getName());

                JOptionPane.showMessageDialog(null, ex.toString(), "Metadata Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_uploadButActionPerformed

    private void isExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isExpActionPerformed
        //change computational related parameters to "N/A"
        if (isExp.isSelected()) {
            truncCom.setSelectedIndex(1);
            functCom.setSelectedIndex(1);
            basisCom.setSelectedIndex(1);
        }
    }//GEN-LAST:event_isExpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseFileBut;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JComboBox<String> basisCom;
    private javax.swing.JLabel basisLab;
    private javax.swing.JLabel fileLab;
    private javax.swing.JTextField fileName;
    private javax.swing.JComboBox<String> functCom;
    private javax.swing.JLabel functLab;
    private javax.swing.JCheckBox isExp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox<String> linkerCom;
    private javax.swing.JLabel linkerLab;
    private javax.swing.JComboBox<String> nameCom;
    private javax.swing.JLabel nameLab;
    private javax.swing.JComboBox<String> nodeCom;
    private javax.swing.JLabel nodeLab;
    private javax.swing.JComboBox<String> truncCom;
    private javax.swing.JLabel truncLab;
    private javax.swing.JButton uploadBut;
    // End of variables declaration//GEN-END:variables
}
