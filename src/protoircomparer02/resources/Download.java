/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package protoircomparer02.resources;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import okhttp3.*;

/**
 *
 * @author Aaron
 */
public class Download extends javax.swing.JFrame {

    //initialize class variables
    private static DefaultListModel model = new DefaultListModel();
    private static String[][] Data = UpdateDefs.Data;
    private static ArrayList titles = UpdateDefs.titles;

    OkHttpClient client = new OkHttpClient.Builder()
            .connectTimeout(5, TimeUnit.MINUTES)
            .readTimeout(5, TimeUnit.MINUTES)
            .writeTimeout(5, TimeUnit.MINUTES)
            .build();

    /**
     * Creates new form IRComparerGUI3
     */
    public Download() {

        if (UserAuth.isOffline.isSelected()) {
            ProtoIRComparer02.filePreview.setText("YOU ARE WORKING OFFLINE AND DO NOT HAVE ACCESS TO THE OSF.");
            ProtoIRComparer02.filePreview.append("\n TO CONNECT TO OSF, GO TO \"File > Enter OSF User ID\".");
            dispose();
        } else {
            populateModel();
            initComponents();
            this.setLocationRelativeTo(null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileLab = new javax.swing.JLabel();
        fileName = new javax.swing.JTextField();
        nameLab = new javax.swing.JLabel();
        nameCom = new javax.swing.JComboBox<>();
        truncLab = new javax.swing.JLabel();
        truncCom = new javax.swing.JComboBox<>();
        nodeLab = new javax.swing.JLabel();
        nodeCom = new javax.swing.JComboBox<>();
        functLab = new javax.swing.JLabel();
        functCom = new javax.swing.JComboBox<>();
        linkerLab = new javax.swing.JLabel();
        linkerCom = new javax.swing.JComboBox<>();
        basisLab = new javax.swing.JLabel();
        basisCom = new javax.swing.JComboBox<>();
        isExp = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList<>();
        updateDefs = new javax.swing.JButton();
        downloadBut = new javax.swing.JButton();
        clearBut = new javax.swing.JButton();

        setTitle("DOWNLOAD");

        fileLab.setText("CURRENT FILE:");

        fileName.setText("[NO FILE SELECTED]");

        nameLab.setText("Name");
        nameLab.setToolTipText("Search MOFs by name");

        nameCom.setEditable(true);
        nameCom.setModel(new DefaultComboBoxModel(UpdateDefs.na.toArray()));
        nameCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameComActionPerformed(evt);
            }
        });

        truncLab.setText("Truncation");
        truncLab.setToolTipText("Search by node truncation");

        truncCom.setEditable(true);
        truncCom.setModel(new DefaultComboBoxModel(UpdateDefs.tr.toArray()));
        truncCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truncComActionPerformed(evt);
            }
        });

        nodeLab.setText("Node");
        nodeLab.setToolTipText("Search MOFs by node structure");

        nodeCom.setEditable(true);
        nodeCom.setModel(new DefaultComboBoxModel(UpdateDefs.no.toArray()));
        nodeCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nodeComActionPerformed(evt);
            }
        });

        functLab.setText("Functional");
        functLab.setToolTipText("Search by functional used");

        functCom.setEditable(true);
        functCom.setModel(new DefaultComboBoxModel(UpdateDefs.fu.toArray()));
        functCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functComActionPerformed(evt);
            }
        });

        linkerLab.setText("Linker");
        linkerLab.setToolTipText("Search MOFs by linker");

        linkerCom.setEditable(true);
        linkerCom.setModel(new DefaultComboBoxModel(UpdateDefs.li.toArray()));
        linkerCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkerComActionPerformed(evt);
            }
        });

        basisLab.setText("Basis set");
        basisLab.setToolTipText("Search by basis set");

        basisCom.setEditable(true);
        basisCom.setModel(new DefaultComboBoxModel(UpdateDefs.ba.toArray()));
        basisCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basisComActionPerformed(evt);
            }
        });

        isExp.setText("Experimental Files");
        isExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isExpActionPerformed(evt);
            }
        });

        fileList.setModel(model);
        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(fileList);

        updateDefs.setText("Update Definitions");
        updateDefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDefsActionPerformed(evt);
            }
        });

        downloadBut.setText("DOWNLOAD");
        downloadBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButActionPerformed(evt);
            }
        });

        clearBut.setText("Clear Selections");
        clearBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileLab)
                        .addGap(18, 18, 18)
                        .addComponent(fileName))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nameLab)
                                    .addComponent(nodeLab)
                                    .addComponent(linkerLab))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(nodeCom, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(linkerCom, javax.swing.GroupLayout.Alignment.LEADING, 0, 200, Short.MAX_VALUE)
                                    .addComponent(nameCom, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(basisLab)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(basisCom, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(functLab)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(functCom, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(truncLab)
                                        .addGap(26, 26, 26)
                                        .addComponent(truncCom, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isExp)
                                .addGap(18, 18, 18)
                                .addComponent(clearBut)
                                .addGap(18, 18, 18)
                                .addComponent(updateDefs)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                                .addComponent(downloadBut)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileLab)
                    .addComponent(fileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLab)
                    .addComponent(nameCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(truncLab)
                    .addComponent(truncCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nodeLab)
                    .addComponent(nodeCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(functLab)
                    .addComponent(functCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(linkerLab)
                    .addComponent(linkerCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(basisLab)
                    .addComponent(basisCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isExp)
                    .addComponent(updateDefs)
                    .addComponent(downloadBut)
                    .addComponent(clearBut))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void populateModel() {
        model.clear();
        for (int i = 0; i < titles.size(); i++) {
            model.addElement(titles.get(i));
        }
    }

    private void refreshList() {
        populateModel();
        for (int i = 0; i < Data.length; i++) {

            if (!Data[i][1].equalsIgnoreCase(nameCom.getSelectedItem().toString())
                    && nameCom.getSelectedIndex() != 0
                    && model.contains(Data[i][0])) {
                model.removeElement(Data[i][0]);
            }

            if (!Data[i][2].equalsIgnoreCase(nodeCom.getSelectedItem().toString())
                    && nodeCom.getSelectedIndex() != 0
                    && model.contains(Data[i][0])) {
                model.removeElement(Data[i][0]);
            }

            if (!Data[i][3].equalsIgnoreCase(linkerCom.getSelectedItem().toString())
                    && linkerCom.getSelectedIndex() != 0
                    && model.contains(Data[i][0])) {
                model.removeElement(Data[i][0]);
            }

            if (!Data[i][4].equalsIgnoreCase(truncCom.getSelectedItem().toString())
                    && truncCom.getSelectedIndex() != 0
                    && model.contains(Data[i][0])) {
                model.removeElement(Data[i][0]);
            }

            if (!Data[i][5].equalsIgnoreCase(functCom.getSelectedItem().toString())
                    && functCom.getSelectedIndex() != 0
                    && model.contains(Data[i][0])) {
                model.removeElement(Data[i][0]);
            }

            if (!Data[i][6].equalsIgnoreCase(basisCom.getSelectedItem().toString())
                    && basisCom.getSelectedIndex() != 0
                    && model.contains(Data[i][0])) {
                model.removeElement(Data[i][0]);
            }

            if (Data[i][7] == null
                    && isExp.isSelected()
                    && model.contains(Data[i][0])) {
                model.removeElement(Data[i][0]);
            }
        }

        //notify user if no files meet all of their criteria
        if (model.isEmpty()) {
            ProtoIRComparer02.filePreview.setText("NO FILES MET YOUR CRITERIA.\n"
                    + "PLEASE TRY AGAIN.");
        } else {
            ProtoIRComparer02.filePreview.setText("");
        }
    }

    private void updateDefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDefsActionPerformed
        try {
            UpdateDefs update = new UpdateDefs();
            update.Organize();
            update.AddDummies();
            Data = UpdateDefs.Data;
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("Problem updating definitions.");
        }

        populateModel();
    }//GEN-LAST:event_updateDefsActionPerformed

    private void downloadButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButActionPerformed
        if (!fileName.getText().equals("[NO FILE SELECTED]") && fileName.getText() != null) {

            //get the download link for the specified file
            int watch = 0;
            String url = "";
            boolean exp = false;
            String sel = fileName.getText();
            for (int i = 0; i < Data.length; i++) {
                if (UpdateDefs.Data[i][0].equals(sel)) {
                    url = UpdateDefs.Data[i][8];

                    //to change handling for experimental files
                    if (UpdateDefs.Data[i][7] != null) {
                        exp = true;
                    }

                    watch++;
                }
            }

            //make sure only one file matched the given file name
            if (watch > 1) {
                ProtoIRComparer02.filePreview.setText("WARNING: MORE THAN ONE "
                        + "MATCHING FILE WAS FOUND!");
            } else if (watch == 0) {
                ProtoIRComparer02.filePreview.setText("WARNING: NO MATCHING "
                        + "FILES FOUND!");
            }

            //download the specified file
            Request request = new Request.Builder()
                    .url(url)
                    .get()
                    .addHeader("authorization", "Basic " + UserAuth.key)
                    .addHeader("cache-control", "no-cache")
                    .addHeader("postman-token", "112ed3c8-b538-a3d4-8f7e-65e16cbb6f20")
                    .build();

            try {
                Response response = client.newCall(request).execute();
                String responseString = response.body().string();

                //write file to working directory
                PrintWriter writer = new PrintWriter(sel, "UTF-8");
                writer.print(responseString);
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(Download.class.getName()).log(Level.SEVERE, null, ex);
                ProtoIRComparer02.filePreview.setText("ERROR DOWNLOADING FILE " + fileName.getText());
            }

            //read file into ProtoIRComparer
            File file = new File(sel);
            if (exp == true) {
                ProtoIRComparer02.Files[9] = file;
            } else if (ProtoIRComparer02.Files[0] == null) {
                ProtoIRComparer02.Files[0] = file;
                ProtoIRComparer02.inputBox.setSelectedIndex(0);
            } else if (ProtoIRComparer02.inputNum < 9) {
                ProtoIRComparer02.Files[ProtoIRComparer02.inputNum] = file;
                ProtoIRComparer02.inputNum++;

                //adds an entry to the INPUT# menu, up to a maximum of 10
                ProtoIRComparer02.inputBox.insertItemAt(String.valueOf(
                        ProtoIRComparer02.inputNum),
                        ProtoIRComparer02.inputNum - 1);
                ProtoIRComparer02.inputBox.setSelectedIndex(
                        ProtoIRComparer02.inputNum - 1);
            } else {
                ProtoIRComparer02.filePreview.setText("ALREADY AT 10 STRUCTURE LIMIT");
            }

            //closes download window after the task is complete
            dispose();

        } else {
            ProtoIRComparer02.filePreview.setText("YOU MUST SELECT A FILE.");
        }
    }//GEN-LAST:event_downloadButActionPerformed

    private void clearButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButActionPerformed
        nameCom.setSelectedIndex(0);
        nodeCom.setSelectedIndex(0);
        linkerCom.setSelectedIndex(0);
        truncCom.setSelectedIndex(0);
        functCom.setSelectedIndex(0);
        basisCom.setSelectedIndex(0);
        fileName.setText("[NO FILE SELECTED]");
        isExp.setSelected(false);
        populateModel();
    }//GEN-LAST:event_clearButActionPerformed

    private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fileListValueChanged
        fileName.setText(fileList.getSelectedValue());
    }//GEN-LAST:event_fileListValueChanged

    //The following methods all update fileList to reflect user specifications.
    private void nameComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameComActionPerformed
        try {
            refreshList();
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("THERE IS A PROBLEM WITH THE FILE METADATA.");
        }
    }//GEN-LAST:event_nameComActionPerformed

    private void nodeComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nodeComActionPerformed
        try {
            refreshList();
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("THERE IS A PROBLEM WITH THE FILE METADATA.");
        }
    }//GEN-LAST:event_nodeComActionPerformed

    private void linkerComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkerComActionPerformed
        try {
            refreshList();
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("THERE IS A PROBLEM WITH THE FILE METADATA.");
        }
    }//GEN-LAST:event_linkerComActionPerformed

    private void truncComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truncComActionPerformed
        try {
            refreshList();
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("THERE IS A PROBLEM WITH THE FILE METADATA.");
        }
    }//GEN-LAST:event_truncComActionPerformed

    private void functComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functComActionPerformed
        try {
            refreshList();
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("THERE IS A PROBLEM WITH THE FILE METADATA.");
        }
    }//GEN-LAST:event_functComActionPerformed

    private void basisComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basisComActionPerformed
        try {
            refreshList();
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("THERE IS A PROBLEM WITH THE FILE METADATA.");
        }
    }//GEN-LAST:event_basisComActionPerformed

    private void isExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isExpActionPerformed
        try {
            refreshList();
        } catch (Exception ex) {
            ProtoIRComparer02.filePreview.setText("THERE IS A PROBLEM WITH THE FILE METADATA.");
        }
        if (isExp.isSelected()) {
            truncCom.setSelectedIndex(1);
            functCom.setSelectedIndex(1);
            basisCom.setSelectedIndex(1);
        }
    }//GEN-LAST:event_isExpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> basisCom;
    private javax.swing.JLabel basisLab;
    private javax.swing.JButton clearBut;
    private javax.swing.JButton downloadBut;
    private javax.swing.JLabel fileLab;
    private javax.swing.JList<String> fileList;
    private javax.swing.JTextField fileName;
    private javax.swing.JComboBox<String> functCom;
    private javax.swing.JLabel functLab;
    private javax.swing.JCheckBox isExp;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> linkerCom;
    private javax.swing.JLabel linkerLab;
    private javax.swing.JComboBox<String> nameCom;
    private javax.swing.JLabel nameLab;
    private javax.swing.JComboBox<String> nodeCom;
    private javax.swing.JLabel nodeLab;
    private javax.swing.JComboBox<String> truncCom;
    private javax.swing.JLabel truncLab;
    private javax.swing.JButton updateDefs;
    // End of variables declaration//GEN-END:variables
}
